import mongoose from 'mongoose';
import logger from '../utils/logger';

/**
 * Configuration de la base de donn√©es MongoDB
 */
class DatabaseConfig {
  private connection: typeof mongoose | null = null;
  private isConnected: boolean = false;

  /**
   * √âtablit la connexion √† MongoDB
   * @param uri - URI de connexion MongoDB
   * @param options - Options de connexion
   */
  async connect(uri: string = process.env.MONGODB_URI || 'mongodb://localhost:27017/darna', options: any = {}): Promise<typeof mongoose> {
    try {
      const defaultOptions = {
        maxPoolSize: 10,
        serverSelectionTimeoutMS: 5000,
        socketTimeoutMS: 45000,
        ...options
      };

      this.connection = await mongoose.connect(uri, defaultOptions);
      this.isConnected = true;

      logger.info('‚úÖ Connexion √† MongoDB √©tablie avec succ√®s');
      logger.info(`üìä Base de donn√©es: ${this.connection.connection.name}`);
      logger.info(`üåê Host: ${this.connection.connection.host}:${this.connection.connection.port}`);

      // Gestion des √©v√©nements de connexion
      this.setupEventHandlers();

      return this.connection;
    } catch (error) {
      this.isConnected = false;
      logger.error('‚ùå Erreur lors de la connexion √† MongoDB:', error);
      throw error;
    }
  }


  /**
   * Configure les gestionnaires d'√©v√©nements pour la connexion
   */
  private setupEventHandlers(): void {
    if (!this.connection) return;

    // Connexion √©tablie
    mongoose.connection.on('connected', () => {
      logger.info('üü¢ MongoDB connect√©');
      this.isConnected = true;
    });

    // Connexion perdue
    mongoose.connection.on('disconnected', () => {
      logger.warn('üü° MongoDB d√©connect√©');
      this.isConnected = false;
    });

    // Erreur de connexion
    mongoose.connection.on('error', (error) => {
      logger.error('üî¥ Erreur MongoDB:', error);
      this.isConnected = false;
    });

    // Fermeture de l'application
    process.on('SIGINT', async () => {
      await this.disconnect();
      process.exit(0);
    });

    process.on('SIGTERM', async () => {
      await this.disconnect();
      process.exit(0);
    });
  }

  /**
   * Ferme la connexion √† MongoDB
   */
  async disconnect(): Promise<void> {
    try {
      if (this.connection && this.isConnected) {
        await mongoose.connection.close();
        this.isConnected = false;
        logger.info('üîå Connexion MongoDB ferm√©e');
      }
    } catch (error) {
      logger.error('‚ùå Erreur lors de la fermeture de MongoDB:', error);
      throw error;
    }
  }

  /**
   * V√©rifie l'√©tat de la connexion
   * @returns True si connect√©
   */
  isConnectionActive(): boolean {
    return this.isConnected && mongoose.connection.readyState === 1;
  }

  /**
   * Obtient les informations de connexion
   * @returns Informations de connexion
   */
  getConnectionInfo(): any {
    if (!this.connection) return null;

    return {
      host: this.connection.connection.host,
      port: this.connection.connection.port,
      name: this.connection.connection.name,
      readyState: mongoose.connection.readyState,
      isConnected: this.isConnected
    };
  }

  /**
   * Teste la connexion √† la base de donn√©es
   * @returns True si le test r√©ussit
   */
  async testConnection(): Promise<boolean> {
    try {
      if (!this.isConnectionActive()) {
        throw new Error('Aucune connexion active');
      }

      // Ping simple pour tester la connexion
      if (!mongoose.connection.db) {
        throw new Error('Base de donn√©es non disponible');
      }
      await mongoose.connection.db.admin().ping();
      logger.info('‚úÖ Test de connexion MongoDB r√©ussi');
      return true;
    } catch (error) {
      logger.error('‚ùå Test de connexion MongoDB √©chou√©:', error);
      return false;
    }
  }
}

// Instance singleton
const databaseConfig = new DatabaseConfig();

export default databaseConfig;
